@page "/Consolidated"
@using OrisonMIS.Client.Services
@using OrisonMIS.Shared.BoldReport
@using OrisonMIS.Shared.Entities.Financial;
@using OrisonMIS.Shared.Entities.General;
@using Microsoft.AspNetCore.Components;
@using OrisonMIS.Shared.Entities.Inventory;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Spinner;
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Notifications;
@using Syncfusion.Blazor.Popups;
@using System.Data;
@using Syncfusion.Blazor.Data;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Dynamic
@inject NavigationManager uriHelper
@inject HttpClient http
@inject OrisonMIS.Client.Services.FinServices FinServ
@inject OrisonMIS.Client.Services.UserRightsService _UserRights
@inject FinancialDateTimeService FinancialDateService

@inject GlobalService _GlobalServ
@inject OrisonMIS.Client.Logics.Contract.Financial.IConsolidated _IConsolidated
@inject OrisonMIS.Client.Logics.Contract.Inventory.IInvAccounts _IInvAccounts
@inject OrisonMIS.Client.Logics.Contract.Inventory.IInvAccountManager _InvAccountManager
@inject OrisonMIS.Client.Logics.Contract.Financial.IItemMasterManager _ItemMasterManager
@inject OrisonMIS.Client.Logics.Contract.Inventory.IInvItemsManager _InvItemsManager
@inject Blazored.SessionStorage.ISessionStorageService localStorage
@inject IJSRuntime IJS
@inject OrisonMIS.Client.Logics.Contract.BoldReport.IBoldReportManager _BoldReport
@inject OrisonMIS.Client.Logics.Contract.General.ICompanyManager _ICompanyManager
@using Microsoft.Extensions.Localization
@using OrisonMIS.Client.Resources
@inject IStringLocalizer<SfResources> Localizer
<head>
    <link href="css/OrisonSyncfusionStyles.css" rel="stylesheet" />
</head>
<div class="col-lg-12 control-section toast-default-section">
    <SfToast ID="toast_type" @ref="ToastObj">
        <ToastPosition X="@ToastPosition"></ToastPosition>
    </SfToast>
</div>
<div>
    <div class="box-card-shadow">

        <div class="row">
            <div class="col-sm-12" style="padding-bottom:7px;">
                <div class="row" style="padding-top: 5px;">
                    <div class="col-md-4">
                        <SfButton @onclick="ExcelExport" IconCss="Icon excel" CssClass="e-btn" Content=@Localizer["Excel"] IsPrimary="false" />
                        <SfButton @onclick="ExportPdf" IconCss="Icon pdf" CssClass="e-btn" Content=@Localizer["PDF"] IsPrimary="false" />

                    </div>
                    <div class="col-md-4 text-center">
                        @if (AccountName != null && AccountCode != null)
                        {
                            <h4 style="font-weight:bold;">@($"{AccountName} ({AccountCode})")</h4>
                        }
                    </div>
                    <div class="col-md-4" style="text-align:end">
                        <label class="page-heading">@Localizer["Consolidated Report"]</label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="box-card-shadow">

        <div class="row">
            <div class="col-sm-12" style="padding-bottom:7px;">
                <div class="row">
                    <div class="col-md-12">
                        <SfDatePicker @bind-Value="@FinancialDateService.StartDate" Format="dd/MM/yyyy" title=@Localizer["From Date"] Width="120px" Placeholder=@Localizer["From Date"]></SfDatePicker>
                        <SfDatePicker @bind-Value="@FinancialDateService.EndDate" Format="dd/MM/yyyy" title=@Localizer["To Date"] Width="120px" Placeholder=@Localizer["To Date"]></SfDatePicker>
                        <SfTextBox @bind-Value="@ObAcc.AccountName" CssClass="textbox" @ref="@AccountRef" Placeholder=@Localizer["Please Select Account"] ShowClearButton="true" Readonly="true" Width="300px" Focus="@FocusHandler" Enabled="true"></SfTextBox>
                        <SfComboBox DataSource="@branchSelection" TItem="Branch" TValue="string" @bind-Value="selectedCriteria" Width="180px">
                            <ComboBoxFieldSettings Text="text" Value="value"></ComboBoxFieldSettings>
                        </SfComboBox>
                        <SfMultiSelect TValue="string[]" TItem="ParentLevel" AllowFiltering="true" Placeholder=@Localizer["Level"] Width="180px" Mode="@VisualMode.CheckBox" DataSource="@levels" ShowSelectAll="@ShowSelectAllCheckBox" EnableSelectionOrder="@EnableSelectionOrders" ShowDropDownIcon="@EnableDropDownIcon" FilterBarPlaceholder="Search Level" PopupHeight="350px">
                            <MultiSelectEvents TItem="ParentLevel" TValue="string[]" ValueChange="@ValueChangeHandlerLevels"></MultiSelectEvents>
                            <MultiSelectFieldSettings Text="Level" Value="Level"></MultiSelectFieldSettings>
                        </SfMultiSelect>
                        <SfCheckBox @bind-Checked="@Ledger" @onchange="onChange" Label=@Localizer["Ledger Only"]></SfCheckBox>
                        <SfButton IconCss="Icon search" @onclick="@Search_Click" title=@Localizer["Search"] CssClass="widthset"></SfButton>
                        <SfTextBox @ref="search" Input="OnInput" Placeholder=@Localizer["Global Search"] Width="250px" ShowClearButton="true" CssClass="e-btn2"></SfTextBox>
                        <SfButton IconCss="Icon filter" CssClass="e-btn4" Content=" " @onclick="@Clear_Click" HtmlAttributes="@ClearFilter"></SfButton>

                        @if (Isload)
                        {
                            <img src="gif/loading-waiting.gif" style="padding-left:2px; width: 20px; height: 20px;" />
                        }

                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="box-card-shadow">
        <div class="col-md-12 col-sm-12">
            <div class="row" style="padding-top:0px;">
                <div class="table-responsive" style="position: relative; min-height:600px; min-width: 300px ">

                @if(!loading){

                    @if (consolidatedBranchWise.Count() > 0)
                    {
       
                            @if (Stmt == null)
                            {
                                <p><em>No data...</em></p>
                            }
                            else
                            {
                                <SfGrid DataSource="branchWise"
                                        GridLines="@GridLine.Both"
                                        EnableHover="true"
                                        EnableVirtualization="true"
                                        @ref="Consolidatedgrid"
                                        Height="550"
                                        Width="100%"
                                        AllowFiltering="true"
                                        AllowPdfExport="true"
                                        AllowPaging="true"
                                        AllowResizing="true"
                                        AllowExcelExport="true"
                                        RowHeight="25">
                                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                                    <GridPageSettings PageSize="100"></GridPageSettings>

                                    <GridColumns>
                                        @if (Keys != null)
                                        {
                                            foreach(var i in Keys)
                                            {
                                                if ((i.ToString() != "VoucherEntry") &&  (i.ToString() != "ParentLevel"))
                                                {
                                                    var width = i.ToString() == "AccountName" ? "70%" : "30%";
                                                    var textAlign = (i.ToString() != "AccountName") && (i.ToString() != "AccountCode") ? TextAlign.Right : TextAlign.Left;
                                                    var format = (i.ToString() != "AccountName") && (i.ToString() != "AccountCode") ? "0.00" : "";
                                                    <GridColumn Field="@(i.ToString())" HeaderText="@(i.ToString())" HeaderTextAlign="TextAlign.Left" TextAlign="@textAlign" AllowFiltering="true" Format="@format" Width="@width"></GridColumn>
                                                }
                                            }
                                        }
                                    </GridColumns>
                                    <GridAggregates>
                                        <GridAggregate>
                                            <GridAggregateColumns>
                                                @foreach(var i in Keys){
                                                    if ((i.ToString() != "AccountName") && (i.ToString() != "AccountCode")){
                                                        <GridAggregateColumn Field="@i" Type="AggregateType.Sum" Format="0.00"></GridAggregateColumn>
                                                    }
                                                }
                                            </GridAggregateColumns>
                                        </GridAggregate>
                                    </GridAggregates>
                                </SfGrid>

                            }
                   
                    }
                    else{

                    @if (Stmt == null)
                    {
                        <p><em>No data...</em></p>
                    }
                    else
                    {
                        <SfGrid DataSource="Stmt"
                                GridLines="@GridLine.Vertical"
                                EnableHover="true"
                                Query="LocalDataQueryMemberItem"
                                @ref="Grid"
                                Height="550"
                                Width="100%"
                                AllowFiltering="true"
                                AllowSorting="true"

                                AllowPdfExport="true"
                                AllowPaging = "true"
                                AllowExcelExport="true"
                                RowHeight="25"
                                AllowResizing="true">
                                    <GridPageSettings PageSize="200"></GridPageSettings>
                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>

                            <GridColumns>
                                @if (Stmt.Count() > 0 && branchDetaild)
                                {
                                    <GridColumn Field="@nameof(constmtObj.Branch)" HeaderText="Branch" Width="20%" HeaderTextAlign="TextAlign.Left">
                                        <Template>
                                            @{

                                                var v = (context as Consolidated);
                                                var VE = v.VoucherEntry;
                                                var formattedvalue = v.Branch.PadLeft(Convert.ToInt32(v.ParentLevel) * 5);

                                                @if (VE == 1)
                                                {
                                                    <span>@formattedvalue</span>
                                                }
                                                else
                                                {
                                                <span style="font-weight:bold;">@v.Branch</span>
                                                }
                                            }
                                        </Template>
                                    </GridColumn>
                                }

                                <GridColumn Field="@nameof(constmtObj.AccountCode)" HeaderText=@Localizer["Account Code"] Width="20%" HeaderTextAlign="TextAlign.Left">
                                    <Template>
                                        @{
                                            var label = (context as Consolidated).AccountCode;
                                            var VE = (context as Consolidated).VoucherEntry;
                                            @if (VE == 1)
                                            {
                                                <span>@label</span>
                                            }
                                            else
                                            {
                                                <span style="font-weight:bold;">@label</span>
                                            }

                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field="@nameof(constmtObj.AccountName)" HeaderText=@Localizer["Account Name"] Width="35%" HeaderTextAlign="TextAlign.Left">
                                    <Template>
                                        @{

                                            var v = (context as Consolidated);
                                            var VE = v.VoucherEntry;
                                            var formattedvalue = v.AccountName.PadLeft(Convert.ToInt32(v.ParentLevel) * 5);

                                            @if (VE == 1)
                                            {
                                                <span>@formattedvalue</span>
                                            }
                                            else
                                            {
                                                <span style="font-weight:bold;">@formattedvalue</span>
                                            }
                                        }
                                    </Template>
                                </GridColumn>
                                        <GridColumn Field="@nameof(constmtObj.PrevDebit)" HeaderText=@Localizer["PrevDebit"] Width="20%" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left" Format="@DecimalFormat">
                                    <Template>
                                        @{

                                                    var label = Convert.ToDecimal((context as Consolidated).PrevDebit).ToString(@DecimalFormat);
                                            var VE = (context as Consolidated).VoucherEntry;
                                            @if (VE == 1)
                                            {
                                                <span>@label</span>
                                            }
                                            else
                                            {
                                                <span style="font-weight:bold;">@label</span>
                                            }
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field="@nameof(constmtObj.PrevCredit)" HeaderText=@Localizer["PrevCredit"] Width="20%" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left" Format="@DecimalFormat">
                                    <Template>
                                        @{

                                                    var label = Convert.ToDecimal((context as Consolidated).PrevCredit).ToString(@DecimalFormat);
                                            var VE = (context as Consolidated).VoucherEntry;
                                            @if (VE == 1)
                                            {
                                                <span>@label</span>
                                            }
                                            else
                                            {
                                                <span style="font-weight:bold;">@label</span>
                                            }
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field="@nameof(constmtObj.Debit)" HeaderText=@Localizer["Debit"] Width="20%" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left" Format="@DecimalFormat">
                                    <Template>
                                        @{
                                                    var label = Convert.ToDecimal((context as Consolidated).Debit).ToString(@DecimalFormat);
                                            var VE = (context as Consolidated).VoucherEntry;
                                            @if (VE == 1)
                                            {
                                                <span>@label</span>
                                            }
                                            else
                                            {
                                                <span style="font-weight:bold;">@label</span>
                                            }

                                        }
                                    </Template>
                                </GridColumn>
                                        <GridColumn Field="@nameof(constmtObj.Credit)" HeaderText=@Localizer["Credit"] Width="20%" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left" Format="@DecimalFormat">
                                    <Template>
                                        @{
                                                    var label = Convert.ToDecimal((context as Consolidated).Credit).ToString(@DecimalFormat);
                                            var VE = (context as Consolidated).VoucherEntry;
                                            @if (VE == 1)
                                            {
                                                <span>@label</span>
                                            }
                                            else
                                            {
                                                <span style="font-weight:bold;">@label</span>
                                            }

                                        }
                                    </Template>
                                </GridColumn>
                                        <GridColumn Field="@nameof(constmtObj.Balance)" HeaderText=@Localizer["Balance"] Width="20%" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left" Format="@DecimalFormat">
                                    <Template>
                                        @{
                                                    var label = Convert.ToDecimal((context as Consolidated).Balance).ToString(@DecimalFormat);
                                            var VE = (context as Consolidated).VoucherEntry;
                                            @if (VE == 1)
                                            {
                                                <span>@label</span>
                                            }
                                            else
                                            {
                                                <span style="font-weight:bold;">@label</span>
                                            }

                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                            <GridAggregates>
                                <GridAggregate>
                                    <GridAggregateColumns>
                                                <GridAggregateColumn Field=@nameof(constmtObj.PrevDebit) Type="AggregateType.Custom" Format="@DecimalFormat">
                                            <FooterTemplate>
                                                @{

                                                    <div>
                                                        <p> @GetWeightedAggregate("PrevDebit")</p>
                                                    </div>
                                                }
                                            </FooterTemplate>
                                        </GridAggregateColumn>
                                                <GridAggregateColumn Field=@nameof(constmtObj.PrevCredit) Type="AggregateType.Custom" Format="@DecimalFormat">
                                            <FooterTemplate>
                                                @{
                                                    <div>
                                                        <p> @GetWeightedAggregate("PrevCredit")</p>
                                                    </div>
                                                }
                                            </FooterTemplate>
                                        </GridAggregateColumn>
                                                <GridAggregateColumn Field=@nameof(constmtObj.Debit) Type="AggregateType.Custom" Format="@DecimalFormat">
                                            <FooterTemplate>
                                                @{
                                                    <div>
                                                        <p> @GetWeightedAggregate("Debit")</p>
                                                    </div>
                                                }
                                            </FooterTemplate>
                                        </GridAggregateColumn>
                                                <GridAggregateColumn Field=@nameof(constmtObj.Credit) Type="AggregateType.Custom" Format="@DecimalFormat">
                                            <FooterTemplate>
                                                @{
                                                    <div>
                                                        <p> @GetWeightedAggregate("Credit")</p>
                                                    </div>
                                                }
                                            </FooterTemplate>
                                        </GridAggregateColumn>
                                                <GridAggregateColumn Field=@nameof(constmtObj.Balance) Type="AggregateType.Custom" Format="@DecimalFormat">
                                            <FooterTemplate>
                                                @{
                                                    <div>
                                                        <p> @GetWeightedAggregate("Balance")</p>
                                                    </div>
                                                }
                                            </FooterTemplate>
                                        </GridAggregateColumn>
                                    </GridAggregateColumns>
                                </GridAggregate>
                            </GridAggregates>
                        </SfGrid>
                    }
              
                }

    }
    else
    {
        <div style="padding-top:700px;">

            <svg width="2500" height="2500" viewBox="126.444 2.281 589 589"><image href="gif/loading-waiting.gif" height="590px" width="770px" /></svg>
        </div>
    }
                    </div>
                </div>
            </div>
        </div>
    </div>
<div>
    <SfDialog Width="80%" Height="90%" IsModal="true" @bind-Visible="AccountSearch" ShowCloseIcon="true">
        <DialogEvents />

        <DialogTemplates>
            <Header>
                <div style="padding-top:10px">
                    <SfTextBox @ref="searchAccount" Input="OnInputAccount" Placeholder="Search here" ShowClearButton="true" CssClass="e-btn2"></SfTextBox>
                </div>
            </Header>
            <Content>
                <div>
                    <SfGrid DataSource="@AccList"
                            GridLines="GridLine.Both"
                            Height="100%" Width="100%"
                            AllowPaging="true"
                            AllowFiltering="true"
                            AllowResizing="true"
                            AllowReordering="true"
                            ShowColumnChooser="true"
                            @ref="AccountList"
                            EnablePersistence="true"
                            RowHeight="23">
                        <GridEvents RowSelecting="AccountRowSelectingHandler" TValue="dtInvAccounts"></GridEvents>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="false"></GridFilterSettings>
                        <GridPageSettings PageSize="50"></GridPageSettings>
                        <GridSelectionSettings PersistSelection="true" Mode="Syncfusion.Blazor.Grids.SelectionMode.Both" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                        <GridTemplates>
                        </GridTemplates>
                        <GridColumns>
                            <GridColumn Field=@nameof(dtInvAccounts.ID) IsPrimaryKey="true" Index="1" Visible="false" AllowFiltering="false"></GridColumn>
                            <GridColumn Field=@nameof(dtInvAccounts.AccountCode) HeaderText=@Localizer["Account Code"] Index="2" Width="30%"></GridColumn>
                            <GridColumn Field=@nameof(dtInvAccounts.AccountName) HeaderText=@Localizer["Account Name"] Index="3" Width="70%"></GridColumn>
                            <GridColumn Field=@nameof(dtInvAccounts.AccCategory) HeaderText=@Localizer["Category"] Index="4" Width="30%"></GridColumn>

                        </GridColumns>
                    </SfGrid>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Cancel" CssClass="e-btn" @onclick="@(() => AccountSearch = false)" />
        </DialogButtons>
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    </SfDialog>
</div>

@code
{
    [Parameter]
    public string Query { get; set; }

    private decimal? MinLevel, MaxLevel;

    DateTime SDate = DateTime.Now; 
    DateTime EDate = DateTime.Now;

    private string? FD {get; set;}
    private string? TD {get; set;}
    private string? Name { get; set; }
    private string? Remarks { get; set; }
    private string? selectedCriteria { get; set; }
    private string? AccountName { get; set; }
    private string AccountCode = string.Empty;
    private string ToastPosition = "Right";
    private string? DecimalFormat { get; set; }

    
    int user, BranchID, AccountID, ID;

    private bool ShowAll = false;
    private bool Ledger = false;
    private bool BalMore = false;
    private bool BalLess = false;
    private bool Foreign = false;
    private bool Isload = false;
    private bool branchDetaild = false;
    private bool AccountSearch = false;

    
    SfGrid<Consolidated>? Grid { get; set; }
    
    private IList<Consolidated> DataSource { get; set; }
    private IList<dtInvAccounts> AccList = new List<dtInvAccounts>();
    private IList<Consolidated> Stmt = new List<Consolidated>();
    private IList<ExpandoObject> consolidatedBranchWise = new List<ExpandoObject>();
    private IList<ExpandoObject> branchWise = new List<ExpandoObject>();
    private IList<ParentLevel> levels = new List<ParentLevel>();
    
    dtInvAccounts ObAcc = new dtInvAccounts();
    Consolidated constmtObj = new Consolidated();

    SfComboBox<string, dtInvAccounts> ItemCombo { get; set; }
    SfToast ToastObj;
    SfTextBox AccountRef;


    public Query LocalDataQueryMemberItem { get; set; } = new Query().Take(20);
    public Query LocalDataQueryAccounts { get; set; } = new Query().Take(20);

   
    public class Branch
    {
        public string value { get; set; }
        public string? text { get; set; }
    }
    
    private List<ToastModel> Toast = new List<ToastModel>
    {
        new ToastModel{Content="Choose an account, please.", CssClass="e-toast-info", Icon="e-error toast-icons" },

    };
    private Dictionary<string, object> ClearFilter = new Dictionary<string, object>()
    {
        { "title", "Clear Filter"}
    };
    public IEnumerable<Branch> branchSelection = new List<Branch>()
    {
        new Branch { value = "Branch",text ="Branch"},
        new Branch { value = "AllBranch",text ="All Branch"},
        new Branch { value = "BranchDetailed",text ="Branch Detailed"},
        new Branch { value = "BranchWise",text ="Branch Wise"},
    };

    protected override async Task OnInitializedAsync()
    {
        selectedCriteria = branchSelection.FirstOrDefault()?.text;
        BranchID = await localStorage.GetItemAsync<int>("BranchID");
        user = await localStorage.GetItemAsync<int>("UserID");
        AccountID = await localStorage.GetItemAsync<int>("AccountID");
        await FinancialDateService.InitializeDates();

        if (user == 0)
        {
            string HomeUrl = "";
            HomeUrl = await _UserRights.GetURl("Logout", AccountID);
            uriHelper.NavigateTo(HomeUrl);
        }
        else
        {
            // var result = await FinServ.GetScalar("Select Entryfrom from company where id =" + BranchID);
            // result = "{Scalar:" + result + "}";
            // var ob = JObject.Parse(result.ToString());
            // var dt = ob["Scalar"]["Entryfrom"].ToString();
            // SDate = Convert.ToDateTime(dt);
            // FinancialDateTime financialDate = await FinServ.GetFinancialDateTimeAsync(BranchID);
            // SDate = financialDate.startDate;
            // EDate = financialDate.endDate;
            AccList = _GlobalServ.AccountStatement.Where(a => a.VoucherEntry == false).ToList();
            levels = (await _IInvAccounts.GetLevels()).ToList();
            DecimalFormat = _GlobalServ.GlobalCurrencyFormat;
            if (DecimalFormat == null || DecimalFormat == "")
            {

                DecimalFormat = "0.00";
            }
            await base.OnInitializedAsync();
        }
        await InvokeAsync(StateHasChanged);
    }

    public SfGrid<ExpandoObject> Consolidatedgrid;
    public IDictionary<string, object> GridLoop = new Dictionary<string, object>();
    public string[] Keys = null;
    public async Task Search_Click()
    {
        branchWise = new List<ExpandoObject>();
        consolidatedBranchWise = new List<ExpandoObject>();
        // if (ObAcc.ID == 0 && selectedCriteria != "BranchWise")
        // {
        //     await this.ToastObj.ShowAsync(Toast[0]);
        //     return;
        // }
        
        Isload = true;
        SDate = FinancialDateService.StartDate;
        EDate = FinancialDateService.EndDate;
        FD = SDate.Month.ToString("00") + "-" + SDate.Day.ToString("00") + "-" + SDate.Year;
        TD = EDate.Month.ToString("00") + "-" + EDate.Day.ToString("00") + "-" + EDate.Year;
        if (selectedCriteria == "BranchWise")
        {
            consolidatedBranchWise = (await _IConsolidated.getConsolidatedBranchWise(BranchID, FD.ToString(), TD.ToString(), ObAcc.ID, 0, "", "Group", selectedCriteria)).ToList();
            GridLoop = consolidatedBranchWise.FirstOrDefault();
            Keys = GridLoop.Keys.ToArray();
            if (Ledger == true)
                branchWise = consolidatedBranchWise.Where(item =>
                                                                {
                                                                    IDictionary<string, object> dictionary = (IDictionary<string, object>)item;
                                                                    return  dictionary["VoucherEntry"].Equals(true);
                                                                }).ToList();
            else
                branchWise = consolidatedBranchWise;
        }
        else
        {
            DataSource = (await _IConsolidated.Show(BranchID, FD.ToString(), TD.ToString(), ObAcc.ID, 0, "", "Group", selectedCriteria)).ToList();
            if (Ledger == true)
                DataSource = DataSource.Where(x => x.VoucherEntry == 1).ToList();
            Stmt = DataSource.ToList();

        }
        filterLevelWise(selectedLevel);
        if (selectedCriteria == "BranchDetailed")
            branchDetaild = true;
        else
            branchDetaild = false;
        Isload = false;

        await InvokeAsync(StateHasChanged);
    }

    private void ValueChangeHandler(ChangeEventArgs<string, dtInvAccounts> args)
    {
        if (args.ItemData.GetType() != null)
        {
            ObAcc = args.ItemData;
        }
    }

    public async Task onFilteringCustAccount(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
    {
        args.PreventDefaultAction = true;
        var pre = new WhereFilter();
        var predicate = new List<WhereFilter>();
        predicate.Add(new WhereFilter() { Condition = "or", Field = "AccountCode", value = args.Text, Operator = "contains", IgnoreAccent = true, IgnoreCase = true });
        predicate.Add(new WhereFilter() { Condition = "or", Field = "AccountName", value = args.Text, Operator = "contains", IgnoreAccent = true, IgnoreCase = true });
        pre = WhereFilter.Or(predicate);
        var query = new Query();
        query = args.Text == "" ? new Query().Take(100) : new Query().Where(pre).Take(100);
        await this.ItemCombo.FilterAsync(AccList, query);
    }

    public void ExcelExport()
    {
        ExcelExportProperties ExcelProperties = new ExcelExportProperties();
        ExcelProperties.FileName = "Consolidated.xlsx";
        this.Grid.ExportToExcelAsync(ExcelProperties);
    }
    public List<ExpandoObject> companyDetails = new List<ExpandoObject>();

    public async Task ExportPdf()
    {
        try
        {
            Isload = true;
            if((selectedCriteria == "Branch" || selectedCriteria == "AllBranch") && Stmt != null)
                await getReport("Consolated");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            Isload = false;
        }

    }
    public async Task getReport(string reportName)
    {
        try
        {
            companyDetails = new List<ExpandoObject>();
            companyDetails = await _ICompanyManager.GetCompanyDetails(BranchID);
            DataSource dt = new DataSource
            {
                Parameters = new List<JSReportParameter>
                {
                    new JSReportParameter
                    {
                        Name = "DateFrom",
                        Values = new List<string> { SDate.ToString() }
                    },
                    new JSReportParameter
                    {
                        Name = "DateUpto",
                        Values = new List<string> { EDate.ToString() }
                    },
                    new JSReportParameter
                    {
                        Name = "AccountName",
                        Values = new List<string> { ObAcc.AccountName.ToString() }
                    },new JSReportParameter
                    {
                        Name = "PrevCredit",
                        Values = new List<string> { PrevCredit.ToString() }
                    },new JSReportParameter
                    {
                        Name = "PrevDebit",
                        Values = new List<string> { PrevDebit.ToString() }
                    },new JSReportParameter
                    {
                        Name = "Debit",
                        Values = new List<string> { Debit.ToString() }
                    },new JSReportParameter
                    {
                        Name = "Credit",
                        Values = new List<string> { Credit.ToString() }
                    },new JSReportParameter
                    {
                        Name = "Balance",
                        Values = new List<string> { Balance.ToString() }
                    },
                }
            };
            dt.DataSet1 = new List<ExpandoObject>();
            dt.DataSet2 = new List<ExpandoObject>();
            dt.ReportName = reportName;
            dt.DataSet1 = JsonConvert.DeserializeObject<List<ExpandoObject>>(JsonConvert.SerializeObject(Stmt));
            dt.DataSet2 = JsonConvert.DeserializeObject<List<ExpandoObject>>(JsonConvert.SerializeObject(companyDetails));
            if (dt.ReportName != "")
            {
                var Result = await _BoldReport.GetReport(dt);
                var filename = dt.ReportName + ".pdf";
                await IJS.InvokeVoidAsync("jsSaveAsFile", filename, Convert.ToBase64String(Result.ToArray()));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {

        }
    }
    public string? PrevCredit { get; set; }
    public string? PrevDebit { get; set; }
    public string? Debit { get; set; }
    public string? Credit { get; set; }
    public string? Balance { get; set; }
    public string GetWeightedAggregate(string dataField)
    {
        if (dataField == "PrevDebit")
        {
            PrevDebit = decimal.Parse(Queryable.Sum(DataSource.Where(x => x.VoucherEntry == 1).Select(x => x.PrevDebit).AsQueryable()).ToString()).ToString("N2");
            return PrevDebit.ToString();
        }
        else if (dataField == "PrevCredit")
        {
            PrevCredit = decimal.Parse(Queryable.Sum(DataSource.Where(x => x.VoucherEntry == 1).Select(x => x.PrevCredit).AsQueryable()).ToString()).ToString("N2");
            return PrevCredit.ToString();
        }
        else if (dataField == "Debit")
        {
            Debit = decimal.Parse(Queryable.Sum(DataSource.Where(x => x.VoucherEntry == 1).Select(x => x.Debit).AsQueryable()).ToString()).ToString("N2");
            return Debit.ToString();
        }
        else if (dataField == "Credit")
        {
            Credit = decimal.Parse(Queryable.Sum(DataSource.Where(x => x.VoucherEntry == 1).Select(x => x.Credit).AsQueryable()).ToString()).ToString("N2");
            return Credit.ToString();
        }
        else if (dataField == "Balance")
        {
            Balance = decimal.Parse(Queryable.Sum(DataSource.Where(x => x.VoucherEntry == 1).Select(x => x.Balance).AsQueryable()).ToString()).ToString("N2");
            return Balance.ToString();
        }
        else
            return "0.00";
    }
    SfTextBox search;
    public void OnInput(InputEventArgs args)
    {
        this.Grid.SearchAsync(args.Value);
        this.Consolidatedgrid.SearchAsync(args.Value);
        this.StateHasChanged();
    }
    private void onChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (consolidatedBranchWise != null)
        {
            if(Ledger)
                branchWise = consolidatedBranchWise.Where(item =>
                                                                {
                                                                    IDictionary<string, object> dictionary = (IDictionary<string, object>)item;
                                                                    return dictionary["VoucherEntry"].Equals(true);
                                                                }).ToList();
            else
                branchWise = consolidatedBranchWise.ToList();
        }
    }
    private async Task FocusHandler(FocusInEventArgs args)
    {
        AccountSearch = true;
        await AccountRef.FocusOutAsync();
        await InvokeAsync(StateHasChanged);
    }
    private bool loading = false;
    public async Task AccountRowSelectingHandler(RowSelectingEventArgs<dtInvAccounts> args)
    {
        try
        {
            loading = true;
            ObAcc.AccountName = args.Data.AccountName;
            AccountName = args.Data.AccountName;
            AccountCode = args.Data.AccountCode;
            AccountSearch = false;
            ObAcc = args.Data;
            await Search_Click();
            loading = false;
            await InvokeAsync(StateHasChanged);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    SfTextBox searchAccount;
    SfGrid<dtInvAccounts> AccountList { get; set; }
    public void OnInputAccount(InputEventArgs args)
    {
        this.AccountList.SearchAsync(args.Value);
        this.StateHasChanged();
    }
    public bool ShowSelectAllCheckBox { get; set; } = true;
    public bool EnableSelectionOrders { get; set; } = true;
    public bool EnableDropDownIcon { get; set; } = true;
    private bool CheckSelectAll { get; set; } = true;
    private bool DropDownButton { get; set; } = true;
    private bool SelectionReorder { get; set; } = true;
    public void OnSelectAllChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.ShowSelectAllCheckBox = args.Checked;
    }
    public void OnDropDownButtonChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.EnableDropDownIcon = args.Checked;
    }
    public void OnSeletionReorder(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.EnableSelectionOrders = args.Checked;
    }
    public string[] selectedLevel { get; set; }
    private void ValueChangeHandlerLevels(MultiSelectChangeEventArgs<string[]> args)
    {
        try
        {
            if (selectedLevel != null)
                Array.Clear(selectedLevel, 0, selectedLevel.Length);
            selectedLevel = args.Value;
            filterLevelWise(selectedLevel);
        }
        catch (Exception e)
        {

            throw e;
        }        

    }
    public void filterLevelWise(string[]? Value)
    {
        if (consolidatedBranchWise != null && consolidatedBranchWise.Count() > 0)
        {
            if (Value != null)
                branchWise = consolidatedBranchWise.Where(item =>
                {
                    IDictionary<string, object> dictionary = item;
                    return Value.Contains(dictionary["ParentLevel"].ToString());
                }).ToList();
            else
                branchWise = consolidatedBranchWise;
        }
        else if (DataSource != null && DataSource.Count() > 0)
        {
            if (Value != null)
                Stmt = DataSource.Where(x => Value.Contains(x.ParentLevel.ToString())).ToList();
            else
                Stmt = DataSource;
        }
    }
    public async Task Clear_Click()
    {
        await Grid!.SearchAsync("");
        await Grid.ClearFilteringAsync();

    }
}
