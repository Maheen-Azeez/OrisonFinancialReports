@page "/InvoiceWiseSales"
@using OrisonMIS.Client.Services
@using OrisonMIS.Shared.Entities
@using OrisonMIS.Shared.Entities.Financial;
@using Microsoft.AspNetCore.Components;
@using OrisonMIS.Shared.Entities.General
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.TreeGrid;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Spinner;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@inject NavigationManager uriHelper
@inject HttpClient http
@inject GlobalService _GlobalServ
@inject IJSRuntime IJS
@inject Blazored.SessionStorage.ISessionStorageService localStorage
@inject OrisonMIS.Client.Services.FinServices FinServ
@inject OrisonMIS.Client.Services.UserRightsService _UserRights
@inject OrisonMIS.Client.Logics.Contract.Financial.IFinancialManager _financial
@inject FinancialDateTimeService FinancialDateService

@using Microsoft.Extensions.Localization
@using OrisonMIS.Client.Resources
@inject IStringLocalizer<SfResources> Localizer
<head>
    <link href="css/OrisonSyncfusionStyles.css" rel="stylesheet" />
</head>

<div>
    <div class="box-card-shadow">
        <div class="row">
            <div class="col-sm-12" style="padding-bottom:7px;">
                <div class="row" style="padding-top: 5px;">
                    <div class="col-md-8">
                        <SfButton @onclick="ExcelExport" IconCss="Icon excel" CssClass="e-btn" Content=@Localizer["Excel"] IsPrimary="false" />
                        <SfButton @onclick="PdfExport" IconCss="Icon pdf" CssClass="e-btn" Content=@Localizer["PDF"] IsPrimary="false" />
                    </div>
                    <div class="col-md-4" style="text-align:end">
                        <label class="page-heading">@Localizer["Invoice-Wise"]</label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="box-card-shadow">
        <div class="row">
            <div class="col-sm-12" style="padding-bottom:8px;">
                <div class="row">
                    <div class="col-md-12">
                        @* <SfComboBox TValue="string" TItem="string" Placeholder="Select Type" Width="250px" @bind-Value="@BasicType" CssClass="e-multi-column"
                                    AllowFiltering="true" DataSource="@TypeList" PopupHeight="300px" Enabled="true">
                        </SfComboBox> *@
                        <SfDatePicker @bind-Value="@FinancialDateService.StartDate" Format="dd/MM/yyyy" title=@Localizer["From Date"] Width="140px" Placeholder=@Localizer["From Date"]></SfDatePicker>
                        <SfDatePicker @bind-Value="@FinancialDateService.EndDate" Format="dd/MM/yyyy" title=@Localizer["To Date"] Width="140px" Placeholder=@Localizer["To Date"]></SfDatePicker>
                        <SfButton IconCss="Icon search" @onclick="@Search_Click" title=@Localizer["Search"] CssClass="widthset"></SfButton>
                        <SfTextBox @ref="search" Input="OnInput" Placeholder=@Localizer["Global Search"] Width="250px" ShowClearButton="true" CssClass="e-btn2"></SfTextBox>
                        <SfButton IconCss="Icon filter" CssClass="e-btn4" Content=" " @onclick="@Clear_Click" HtmlAttributes="@ClearFilter"></SfButton>

                        @if (Isload)
                        {
                            <img src="gif/loading-waiting.gif" style="padding-left:2px; width: 20px; height: 20px;" />
                        }

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="box-card-shadow">
        <div class="col-md-12 col-sm-12">
            <div class="row" style="padding-top:0px;">
                <div class="table-responsive" style="position: relative;min-height:600px; min-width: 300px ">

                    @if (dataSource == null)
                    {
                        <p><em>No data...</em></p>
                    }
                    else
                    {
                        <SfGrid DataSource="dataSource"
                                GridLines="@GridLine.Vertical"
                                EnableHover="true"
                                EnableVirtualization="true"
                                Height="@GridHeight"
                                Width="100%"
                                @ref="Grid"
                                AllowFiltering="true"
                                AllowSorting="true"
                                AllowResizing="true"
                                AllowPdfExport="true"
                                AllowPaging="true"
                                AllowExcelExport="true"
                                RowHeight="25">
                            <GridPageSettings PageSize="100"></GridPageSettings>
                            <GridAggregates>
                                <GridAggregate>
                                    <GridAggregateColumns>

                                        <GridAggregateColumn Format="@DecimalFormat" Field=@nameof(dtTransaction.Discount) Type="AggregateType.Sum">
                                            <FooterTemplate>
                                                @{
                                                    var aggregate = (context as AggregateTemplateContext);
                                                    <div>

                                                        <div style="align-items:end;">@aggregate.Sum</div>

                                                    </div>
                                                }
                                            </FooterTemplate>
                                        </GridAggregateColumn><GridAggregateColumn Format="@DecimalFormat" Field=@nameof(dtTransaction.Amount) Type="AggregateType.Sum">
                                            <FooterTemplate>
                                                @{
                                                    var aggregate = (context as AggregateTemplateContext);
                                                    <div>

                                                        <div style="align-items:end;">@aggregate.Sum</div>

                                                    </div>
                                                }
                                            </FooterTemplate>
                                        </GridAggregateColumn><GridAggregateColumn Format="@DecimalFormat" Field=@nameof(dtInvoiceWiseSales.Profit) Type="AggregateType.Sum">
                                            <FooterTemplate>
                                                @{
                                                    var aggregate = (context as AggregateTemplateContext);
                                                    <div>

                                                        <div style="align-items:end;">@aggregate.Sum</div>

                                                    </div>
                                                }
                                            </FooterTemplate>
                                        </GridAggregateColumn><GridAggregateColumn Format="@DecimalFormat" Field=@nameof(dtInvoiceWiseSales.VAT) Type="AggregateType.Sum">
                                            <FooterTemplate>
                                                @{
                                                    var aggregate = (context as AggregateTemplateContext);
                                                    <div>

                                                        <div style="align-items:end;">@aggregate.Sum</div>

                                                    </div>
                                                }
                                            </FooterTemplate>
                                        </GridAggregateColumn>
                                        <GridAggregateColumn Format="@DecimalFormat" Field=@nameof(dtInvoiceWiseSales.Rate) Type="AggregateType.Sum">
                                            <FooterTemplate>
                                                @{
                                                    var aggregate = (context as AggregateTemplateContext);
                                                    <div>

                                                        <div style="align-items:end;">@aggregate.Sum</div>

                                                    </div>
                                                }
                                            </FooterTemplate>
                                        </GridAggregateColumn>

                                    </GridAggregateColumns>
                                </GridAggregate>
                            </GridAggregates>

                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                            <GridColumns>
                                <GridColumn Field="@nameof(dtInvoiceWiseSales.VID)" Visible="false" ></GridColumn>
                                <GridColumn Field="@nameof(dtInvoiceWiseSales.ItemID)" Visible="false"></GridColumn>
                                <GridColumn Field="@nameof(dtInvoiceWiseSales.VDate)" HeaderText=@Localizer["VDate"] Width="100" Format="dd/MM/yyyy" HeaderTextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="@nameof(dtInvoiceWiseSales.Vno)" HeaderText=@Localizer["VNo"] Width="100" HeaderTextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="@nameof(dtInvoiceWiseSales.AccountCode)" HeaderText=@Localizer["Account Code"] Width="110" HeaderTextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="@nameof(dtInvoiceWiseSales.AccountName)" HeaderText=@Localizer["Account Name"] Width="300" HeaderTextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="@nameof(dtInvoiceWiseSales.ItemCode)" HeaderText=@Localizer["ItemCode"] Width="110" HeaderTextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="@nameof(dtInvoiceWiseSales.ItemName)" HeaderText=@Localizer["ItemName"] Width="250" HeaderTextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="@nameof(dtInvoiceWiseSales.Discount)" HeaderText=@Localizer["Discount"] Width="100" Format="0.00" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="@nameof(dtInvoiceWiseSales.Rate)" HeaderText=@Localizer["Rate"] Width="100" Format="0.00" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="@nameof(dtInvoiceWiseSales.VAT)" HeaderText=@Localizer["VAT"] Width="100" Format="0.00" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="@nameof(dtInvoiceWiseSales.Profit)" HeaderText=@Localizer["Profit"] Width="100" Format="0.00" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="@nameof(dtInvoiceWiseSales.Amount)" HeaderText=@Localizer["Amount"] Width="100" Format="0.00" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="@nameof(dtInvoiceWiseSales.Description)" HeaderText=@Localizer["Description"] Width="100" Format="0.00" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left"></GridColumn>
                                
                            </GridColumns>

                        </SfGrid>

                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    int user, BranchID, AccountID, ID;
    public string? Name, Remarks, FD, TD, FinYear;
    public bool Isload = false;
    string GridHeight = "500px";
    public string register { get; set; } = "registers";
    public string BasicType { get; set; }
    IList<string> TypeList = new List<string>()
    {
        "Sales",
        "Payment",
        "Purchase"
    };
    public string? DecimalFormat { get; set; }
    DateTime SDate = DateTime.Now, EDate = DateTime.Now;
    public List<dtInvoiceWiseSales> dataSource = new List<dtInvoiceWiseSales>();
    SfGrid<dtInvoiceWiseSales> Grid { get; set; }
    private Dictionary<string, object> ClearFilter = new Dictionary<string, object>()
        {
            { "title", "Clear Filter"}
        };
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Isload = true;
            BranchID = await localStorage.GetItemAsync<int>("BranchID");
            user = await localStorage.GetItemAsync<int>("UserID");
            AccountID = await localStorage.GetItemAsync<int>("AccountID");
            await FinancialDateService.InitializeDates();

            BasicType = TypeList.FirstOrDefault().ToString();
            if (user == 0)
            {
                string HomeUrl = "";
                HomeUrl = await _UserRights.GetURl("Logout", AccountID);
                uriHelper.NavigateTo(HomeUrl);
            }
            else
            {
                // var result = await FinServ.GetScalar("Select Entryfrom from company where id =" + BranchID);
                // result = "{Scalar:" + result + "}";
                // var ob = JObject.Parse(result.ToString());
                // var dt = ob["Scalar"]["Entryfrom"].ToString();
                // SDate = Convert.ToDateTime(dt);
                // FinancialDateTime financialDate = await FinServ.GetFinancialDateTimeAsync(BranchID);
                // SDate = financialDate.startDate;
                // EDate = financialDate.endDate;
                var dimension = await IJS.InvokeAsync<WindowDimension>("getWindowDimensions");
                GridHeight = (dimension.Height - 180).ToString() + "px";
                DecimalFormat = _GlobalServ.GlobalCurrencyFormat;
                if (DecimalFormat == null || DecimalFormat == "")
                {

                    DecimalFormat = "0.00";
                }
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {

            throw ex;
        }
        finally
        {
            Isload = false;
        }


    }
    public async Task Search_Click()
    {
        try
        {
            Isload = true;
            SDate = FinancialDateService.StartDate;
            EDate = FinancialDateService.EndDate;
            FD = SDate.Month.ToString("00") + "-" + SDate.Day.ToString("00") + "-" + SDate.Year;
            TD = EDate.Month.ToString("00") + "-" + EDate.Day.ToString("00") + "-" + EDate.Year;
            dataSource = await _financial.GetInvoiceWiseSales(BranchID, FD.ToString(), TD.ToString(), "Sales");


            await InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            Isload = false;
        }

    }
    public async Task ExcelExport()
    {
        ExcelExportProperties excelProperties = new ExcelExportProperties
            {
                FileName = "INVOICE_WISE.xlxs",
            };
        await this.Grid.ExportToExcelAsync(excelProperties);
    }
    public async Task PdfExport()
    {
        PdfExportProperties pdfProperties = new PdfExportProperties
            {
                FileName = "INVOICE_WISE.pdf",
                PageSize = PdfPageSize.A1
            };
        await this.Grid.ExportToPdfAsync(pdfProperties);
    }
    SfTextBox search;
    public void OnInput(InputEventArgs args)
    {
        this.Grid.SearchAsync(args.Value);
        this.StateHasChanged();
    }
    public async Task Clear_Click()
    {
        await Grid!.SearchAsync("");
        await Grid.ClearFilteringAsync();

    }
}
