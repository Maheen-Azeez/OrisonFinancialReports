@page "/Yearwise"
@page "/Yearwise/{Query}"
@using OrisonMIS.Shared.Entities.Financial;
@using Microsoft.AspNetCore.Components;

@using OrisonMIS.Shared.Entities.Inventory;
@using OrisonMIS.Shared.Entities.General;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.TreeGrid;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Spinner;
@using Syncfusion.Blazor.Data
@inject NavigationManager uriHelper
@inject HttpClient http
@inject IJSRuntime IJS
@inject OrisonMIS.Client.Logics.Contract.Financial.IAccStmt _AcctStmt
@inject OrisonMIS.Client.Logics.Contract.Inventory.IInvAccountManager _InvAccountManager
@inject OrisonMIS.Client.Logics.Contract.Financial.IItemMasterManager _ItemMasterManager
@inject OrisonMIS.Client.Logics.Contract.Inventory.IInvItemsManager _InvItemsManager
@inject Blazored.SessionStorage.ISessionStorageService localStorage
@inject OrisonMIS.Client.Services.FinServices FinServ
@inject OrisonMIS.Client.Services.UserRightsService _UserRights


<head>
    <link href="css/Loading.css" rel="stylesheet" />
    <link href="css/OrisonSyncfusionStyles.css" rel="stylesheet" />

</head>

<div>
    <div class="box-card-shadow">
        <div class="col-md-12 form-row">
            <div class="col-md-9 form-row">
                <div class="col-md-3 form-row">
                    From Date:
                    <SfDatePicker @bind-Value="@SDate" Format="dd/MM/yyyy" Placeholder="From Date"></SfDatePicker>
                </div>
                <div class="col-md-3 form-row">
                    To Date:
                    <SfDatePicker @bind-Value="@EDate" Format="dd/MM/yyyy" Placeholder="To Date"></SfDatePicker>
                </div>
                <div class="col-md-1">
                    &nbsp;
                    @if (Isload == false)
                    {
                        <SfButton IconCss="Icon search" @onclick="@Search_Click" Content="Search" CssClass="widthset"></SfButton> }
                    else
                    {
                        <SfSpinner Size="60" Label="Loading..." Type="Syncfusion.Blazor.Spinner.SpinnerType.Bootstrap4" Visible="true"></SfSpinner>}
                </div>
            </div>

            <div class="col-md-3" style="text-align:right">
                <label style="color:#014164;font-size:large;font-weight:bold;">BANK DETAILS</label>
            </div>
        </div>
    </div>
    <div class="box-card-shadow">
        <div class="col-md-12 col-sm-12">
            <div class="row" style="padding-top:0px;">
                <div class="table-responsive" style="position: relative; min-height:600px; min-width: 300px ">
                    @if (Stmt == null)
                    {
                        <p><em>No data...</em></p> }

                    else
                    {
                        <SfGrid DataSource="@Stmt" Height="335" AllowExcelExport="true" AllowPdfExport="true" @ref="Grid" FrozenColumns="1" Toolbar="@(new List<string>() { "ExcelExport", "PdfExport" })">
                            <GridEvents OnToolbarClick="Toolbarclick" TValue="BankDetails" RowSelected="OnRowSelected"></GridEvents>
                            <GridColumns>
                                <GridColumn Field="@nameof(BankDetails.AccountCode)" HeaderText="Acc. Code" Width="10%"></GridColumn>
                                <GridColumn Field="@nameof(BankDetails.BankName)" HeaderText="Customer Name" Width="40%"></GridColumn>
                                <GridColumn Field="@nameof(BankDetails.Amount)" HeaderText="Balance" Width="10%" Format="N2"></GridColumn>

                            </GridColumns>

                        </SfGrid>

                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public string Query { get; set; }
    DateTime SDate = DateTime.Now, EDate = DateTime.Now;
    string FD, TD;
    SfGrid<BankDetails> Grid { get; set; }
    public IList<BankDetails> dataSource { get; set; }
    private IEnumerable<BankDetails> TreeGridData { get; set; }
    public IList<dtInvAccounts> AccList = new List<dtInvAccounts>();
    dtInvAccounts ObAcc = new dtInvAccounts();
    IList<BankDetails> Stmt = new List<BankDetails>();
    private bool All = false;
    private bool Active = false;
    private bool InActive = false;
    public int ID;
    public string Name;
    public string Remarks;
    public bool Isload = false;
    int user, BranchID, AccountID;

    protected override async Task OnInitializedAsync()
    {
        BranchID = await localStorage.GetItemAsync<int>("BranchID");
        user = await localStorage.GetItemAsync<int>("UserID");
        AccountID = await localStorage.GetItemAsync<int>("AccountID");
        if (user == 0)
        {
            string HomeUrl = "";
            HomeUrl = await _UserRights.GetURl("Logout", AccountID);
            uriHelper.NavigateTo(HomeUrl);
            // uriHelper.NavigateTo("Home");
        }
        else
        {
            await base.OnInitializedAsync();
        }
        int year = DateTime.Now.Year;
        SDate = new DateTime(year, 1, 1);
        if (Query != null)
        {
            //Query = "31,Customer";
            var parm = Query.Split(',');
            dataSource = (await _AcctStmt.ShowBank(Convert.ToInt32(parm[0]))).ToList();
            Stmt = dataSource.ToList();
            await InvokeAsync(StateHasChanged);
        }

    }
    public async Task Search_Click()
    {
        Isload = true;
        // string URL = _UserRights.GetBaseUrl();
        // if (URL.Contains("localhost"))
        // {
        //     FD = SDate.Day.ToString("00") + "-" + SDate.Month.ToString("00") + "-" + SDate.Year;
        //     TD = EDate.Day.ToString("00") + "-" + EDate.Month.ToString("00") + "-" + EDate.Year;
        // }
        // else
        // {
            FD = SDate.Month.ToString("00") + "-" + SDate.Day.ToString("00") + "-" + SDate.Year;
            TD = EDate.Month.ToString("00") + "-" + EDate.Day.ToString("00") + "-" + EDate.Year;

        //}

        dataSource = (await _AcctStmt.ShowBank(BranchID)).ToList();
        if (SDate != null)
            dataSource = dataSource.Where(x => x.CreatedDate >= SDate).ToList();
        if (EDate != null)
            dataSource = dataSource.Where(x => x.CreatedDate <= EDate).ToList();
        Stmt = dataSource.ToList();


        Isload = false;
        await InvokeAsync(StateHasChanged);
    }

    public async Task Toolbarclick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "PDF Export")
        {
            await this.Grid.ExportToPdfAsync();
        }
        else if (args.Item.Text == "Excel Export")
        {
            await this.Grid.ExportToExcelAsync();
        }
        else if (args.Item.Text == "CSV Export")
        {
            await this.Grid.ExportToCsvAsync();
        }
    }
    public void OnRowSelected(RowSelectEventArgs<BankDetails> args)
    {
        if (args != null)
        {
            var ID = args.Data.AccountId;
            // string URL = _UserRights.GetBaseUrl();
            // if (URL.Contains("localhost"))
            // {
            //     FD = SDate.Day.ToString("00") + "-" + SDate.Month.ToString("00") + "-" + SDate.Year;
            //     TD = EDate.Day.ToString("00") + "-" + EDate.Month.ToString("00") + "-" + EDate.Year;
            // }
            // else
            // {
                FD = SDate.Month.ToString("00") + "-" + SDate.Day.ToString("00") + "-" + SDate.Year;
                TD = EDate.Month.ToString("00") + "-" + EDate.Day.ToString("00") + "-" + EDate.Year;

            //}
            //31,01-09-2020,31-12-2020,214147
            var Query = BranchID + "," + FD + "," + TD + "," + ID;
            string url = "StatementDetails/" + Query;
            IJS.InvokeAsync<object>("open", url, "_blank");
        }

    }

}
