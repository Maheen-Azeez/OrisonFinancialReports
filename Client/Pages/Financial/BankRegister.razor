@page "/BankRegister"
@using OrisonMIS.Client.Services
@using OrisonMIS.Shared.Entities.Financial;
@using Microsoft.AspNetCore.Components;
@using OrisonMIS.Shared.Entities.General
@using OrisonMIS.Shared.Entities.Inventory;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Spinner;
@using Syncfusion.Blazor.Data;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@inject NavigationManager uriHelper
@inject HttpClient http
@inject OrisonMIS.Client.Services.FinServices FinServ
@inject OrisonMIS.Client.Services.UserRightsService _UserRights
@inject GlobalService _GlobalServ
@inject IJSRuntime IJS
@inject OrisonMIS.Client.Logics.Contract.Financial.IAccStmt _AcctStmt
@inject OrisonMIS.Client.Logics.Contract.Inventory.IInvAccountManager _InvAccountManager
@inject OrisonMIS.Client.Logics.Contract.Financial.IItemMasterManager _ItemMasterManager
@inject OrisonMIS.Client.Logics.Contract.Inventory.IInvItemsManager _InvItemsManager
@inject Blazored.SessionStorage.ISessionStorageService localStorage
@inject FinancialDateTimeService FinancialDateService
@using Microsoft.Extensions.Localization
@using OrisonMIS.Client.Resources
@inject IStringLocalizer<SfResources> Localizer
<head>
    <link href="css/OrisonSyncfusionStyles.css" rel="stylesheet" />
</head>

<div>
    <div class="box-card-shadow">

        <div class="row">
            <div class="col-sm-12" style="padding-bottom:7px;">
                <div class="row" style="padding-top: 5px;">
                    <div class="col-md-8">
                        <SfButton @onclick="ExcelExport" IconCss="Icon excel" CssClass="e-btn" Content=@Localizer["Excel"] IsPrimary="false" />
                        <SfButton @onclick="ExportPdf" IconCss="Icon pdf" CssClass="e-btn" Content=@Localizer["PDF"] IsPrimary="false" />
                    </div>
                    <div class="col-md-4" style="text-align:end">
                        <label class="page-heading">@Localizer["Bank Details"]</label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="box-card-shadow">

        <div class="row">
            <div class="col-sm-12" style="padding-bottom:7px;">
                <div class="row">
                    <div class="col-md-12">
                        <SfDatePicker @bind-Value="@FinancialDateService.StartDate" Format="dd/MM/yyyy" title=@Localizer["From Date"] Width="140px" Placeholder=@Localizer["From Date"]></SfDatePicker>
                        <SfDatePicker @bind-Value="@FinancialDateService.EndDate" Format="dd/MM/yyyy" title=@Localizer["To Date"] Width="140px" Placeholder=@Localizer["To Date"]></SfDatePicker>
                        <SfButton IconCss="Icon filter" CssClass="e-btn4" Content=" " @onclick="@Clear_Click" HtmlAttributes="@ClearFilter"></SfButton>
                        @if (Isload)
                        {
                            <img src="gif/loading-waiting.gif" style="padding-left:2px; width: 20px; height: 20px;" />
                        }
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div  class="box-card-shadow">
        <div class="col-md-12 col-sm-12">
            <div class="row" style="padding-top:0px;">
                <div class="table-responsive" style="position: relative; min-height:600px; min-width: 300px ">
                    @if (Stmt == null)
                    {
                        <p><em>No data...</em></p>
                    }
                    else
                    {
                        <SfGrid DataSource="@Stmt"
                                GridLines="GridLine.Both"
                                AllowExcelExport="true"
                                AllowPdfExport="true"
                                AllowSorting="true"
                                Height="550"
                                Width="100%"
                                AllowFiltering="true"
                                @ref="Grid"
                                RowHeight="25">
                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>

                            <GridColumns>
                                <GridColumn Field="@nameof(BankDetails.AccountCode)" HeaderText=@Localizer["Account Code"] Width="80"></GridColumn>
                                <GridColumn Field="@nameof(BankDetails.BankName)" HeaderText=@Localizer["Bank Name"] Width="250"></GridColumn>
                                <GridColumn Field="@nameof(BankDetails.Amount)" HeaderText=@Localizer["Balance"] TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left" Width="100" Format="@DecimalFormat"></GridColumn>
                            </GridColumns>
                        </SfGrid>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

    @code
{
        [Parameter]
        public string Query { get; set; }
        DateTime SDate = DateTime.Now, EDate = DateTime.Now;
        int user, BranchID, AccountID, ID;
        string FD, TD, Name, Remarks;
        SfGrid<BankDetails> Grid { get; set; }
        public IList<BankDetails> dataSource { get; set; }
        private IEnumerable<BankDetails> TreeGridData { get; set; }
        public IList<dtInvAccounts> AccList = new List<dtInvAccounts>();
        dtInvAccounts ObAcc = new dtInvAccounts();
        IList<BankDetails> Stmt = new List<BankDetails>();
        private bool All = false, Active = false, InActive = false;
        public bool Isload = false;
        public string? DecimalFormat { get; set; }
        private Dictionary<string, object> ClearFilter = new Dictionary<string, object>()
        {
            { "title", "Clear Filter"}
        };
        protected override async Task OnInitializedAsync()
        {
            BranchID = await localStorage.GetItemAsync<int>("BranchID");
            user = await localStorage.GetItemAsync<int>("UserID");
            AccountID = await localStorage.GetItemAsync<int>("AccountID");
            await FinancialDateService.InitializeDates();

            if (user == 0)
            {
                string HomeUrl = "";
                HomeUrl = await _UserRights.GetURl("Logout", AccountID);
                uriHelper.NavigateTo(HomeUrl);
            }
            else
            {
                // var result = await FinServ.GetScalar("Select Entryfrom from company where id =" + BranchID);
                // result = "{Scalar:" + result + "}";
                // var ob = JObject.Parse(result.ToString());
                // var dt = ob["Scalar"]["Entryfrom"].ToString();
                // SDate = Convert.ToDateTime(dt);
                // FinancialDateTime financialDate = await FinServ.GetFinancialDateTimeAsync(BranchID);
                // SDate = financialDate.startDate;
                // EDate = financialDate.endDate;
                DecimalFormat = _GlobalServ.GlobalCurrencyFormat;
                if (DecimalFormat == null || DecimalFormat == "")
                {

                    DecimalFormat = "0.00";
                }
                await base.OnInitializedAsync();
            }

            if (Query != null)
            {
                var parm = Query.Split(',');
                dataSource = (await _AcctStmt.ShowBank(Convert.ToInt32(parm[0]))).ToList();
                Stmt = dataSource.ToList();
                await InvokeAsync(StateHasChanged);
            }
        }
        public async Task Search_Click()
        {
            Isload = true;
            dataSource = (await _AcctStmt.ShowBank(BranchID)).ToList();
            Stmt = dataSource.ToList();
            Isload = false;
            await InvokeAsync(StateHasChanged);
        }


        public void OnRowSelected(RowSelectEventArgs<BankDetails> args)
        {
            if (args != null)
            {
                var ID = args.Data.AccountId;
                FD = SDate.Month.ToString("00") + "-" + SDate.Day.ToString("00") + "-" + SDate.Year;
                TD = EDate.Month.ToString("00") + "-" + EDate.Day.ToString("00") + "-" + EDate.Year;
                var Query = BranchID + "," + FD + "," + TD + "," + ID;
                string url = "StatementDetails/" + Query;
                IJS.InvokeAsync<object>("open", url, "_blank");
            }
        }
        public void ExcelExport()
        {
            ExcelExportProperties ExcelProperties = new ExcelExportProperties();
            ExcelProperties.FileName = "BankRegister.xlsx";
            this.Grid.ExportToExcelAsync(ExcelProperties);
        }
        public void ExportPdf()
        {
            PdfExportProperties PdfProperties = new PdfExportProperties();
            PdfProperties.FileName = "BankRegister.pdf";
            this.Grid.ExportToPdfAsync(PdfProperties);
        }
        public async Task Clear_Click()
        {
            await Grid!.SearchAsync("");
            await Grid.ClearFilteringAsync();

        }
    }
